<?xml version="1.0" encoding="UTF-8"?>  
    <beans xmlns="http://www.springframework.org/schema/beans"  
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
        xmlns:context="http://www.springframework.org/schema/context"  
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:task="http://www.springframework.org/schema/task"  
        xsi:schemaLocation="http://www.springframework.org/schema/beans    
                            http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                            http://www.springframework.org/schema/context    
                            http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                            http://www.springframework.org/schema/mvc    
                            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
							http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
							http://www.springframework.org/schema/task   
   							http://www.springframework.org/schema/task/spring-task-3.0.xsd"> 
       	<mvc:annotation-driven /> 
		<!-- 配置js，css等静态文件直接映射到对应的文件夹，不被DispatcherServlet处理 -->
		<mvc:default-servlet-handler />
    	<context:component-scan base-package="com.ucan" /> 
		<aop:aspectj-autoproxy proxy-target-class="true"/>
        <!-- 引入配置文件--> 
        <bean id="property.placeholder.configurer"  class="com.ucan.utils.PropertyReaderConfigurer">  
            <property name="location" value="classpath:jdbc.properties" />  
        </bean>   
         
        <bean id="dataSource_oracle" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close"  init-method="init">  
            <property name="driverClassName" value="${jdbc.driverClass}" />  
            <property name="url" value="${jdbc.url}" />  
            <property name="username" value="${jdbc.username}" />  
            <property name="password" value="${jdbc.password}" />  
            <!-- 初始化连接大小 -->  
            <property name="initialSize" value="${initialSize}"></property>  
            <!-- 连接池最大数量 -->  
            <property name="maxActive" value="${maxActive}"></property>  
            <!-- 连接池最大空闲 -->  
            <property name="maxIdle" value="${maxIdle}"></property>  
            <!-- 连接池最小空闲 -->  
            <property name="minIdle" value="${minIdle}"></property>  
            <!-- 获取连接最大等待时间 -->  
            <property name="maxWait" value="${maxWait}"></property>  
        </bean>  
      
         <bean id="dataSource_sqlserver" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close"  init-method="init"> 
            <property name="driverClassName" value="${jdbc.sqlserver_driverClass}" />  
            <property name="url" value="${jdbc.sqlserver_url}" />  
            <property name="username" value="${jdbc.sqlserver_username}" />  
            <property name="password" value="${jdbc.sqlserver_password}" />  
            <!-- 初始化连接大小 -->  
            <property name="initialSize" value="${initialSize}"></property>  
            <!-- 连接池最大数量 -->  
            <property name="maxActive" value="${maxActive}"></property>  
            <!-- 连接池最大空闲 -->  
            <property name="maxIdle" value="${maxIdle}"></property>  
            <!-- 连接池最小空闲 -->  
            <property name="minIdle" value="${minIdle}"></property>  
            <!-- 获取连接最大等待时间 -->  
            <property name="maxWait" value="${maxWait}"></property>  
        </bean>
      
         <bean id="multipleDataSource" class="com.ucan.dataSouce.MultipleDataSource">
	        <property name="defaultTargetDataSource" ref="dataSource_oracle"/>
	        <property name="targetDataSources">
	            <map>     
	                <!-- 注意这里的value是和上面的DataSource的id对应，key要和下面的CustomerContextHolder中的常量对应 -->
	                <entry value-ref="dataSource_oracle" key="oracleDataSource"/>
	                <entry value-ref="dataSource_sqlserver" key="sqlServerDataSource"/>
	            </map>   
	        </property>
    	</bean>
        <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
        <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
            <property name="dataSource" ref="multipleDataSource" />  
            <!-- 自动扫描mapping.xml文件 -->  
            <property name="mapperLocations" value="classpath:com/ucan/mapping/*.xml"></property>  
        </bean>  
      
        <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
            <property name="basePackage" value="com.ucan.dao" />  
            <property name="sqlSessionFactoryBeanName" value="sessionFactory"></property>  
        </bean>  
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="multipleDataSource" />
		</bean>
	 
<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="NESTED" rollback-for="Exception"/>
            <tx:method name="add*" propagation="NESTED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="NESTED" rollback-for="Exception"/>
            <tx:method name="modify*" propagation="NESTED" rollback-for="Exception"/>
            <tx:method name="edit*" propagation="NESTED" rollback-for="Exception"/>
            <tx:method name="del*" propagation="NESTED" rollback-for="Exception"/>
            <tx:method name="save*" propagation="NESTED" rollback-for="Exception"/>
            <tx:method name="send*" propagation="NESTED" rollback-for="Exception"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="search*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
 <bean id="dataSourceExchange" class="com.ucan.dataSouce.DataSourceExchange"/>
    <aop:config>
        <aop:pointcut id="service" expression="execution(* com.ucan.service.*.*(..))"/>
        <!-- 关键配置，切换数据源一定要比持久层代码更先执行（事务也算持久层代码） -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="service" order="2"/>
        <aop:advisor advice-ref="dataSourceExchange" pointcut-ref="service" order="1"/>
    </aop:config>

	
    
		<!-- 自动扫描   
		<task:executor id="executor" pool-size="5" />  
	<task:scheduler id="scheduler" pool-size="10" />  
	<task:annotation-driven executor="executor" scheduler="scheduler" />
	
	<task:scheduled-tasks>
		<task:scheduled ref="taskDemo"  method="ceshi" cron="*/5 * * * * ?" />
	</task:scheduled-tasks>-->
    </beans> 

	
     